package main

import (
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"
	"sync"
	"time"

	telegram "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Trainer struct {
	ID           int      `json:"id"`
	Name         string   `json:"name"`
	Bio          string   `json:"bio"`
	Achievements []string `json:"achievements"`
	Slots        []string `json:"slots"`
}

type Booking struct {
	UserID   int64  `json:"user_id"`
	Trainer  int    `json:"trainer"`
	TimeSlot string `json:"time_slot"`
	BookedAt int64  `json:"booked_at"`
}

type User struct {
	ID      int64  `json:"id"`
	Name    string `json:"name"`
	HasPaid bool   `json:"has_paid"`
}

type AppState struct {
	Users    map[int64]*User `json:"users"`
	Trainers []Trainer       `json:"trainers"`
	Bookings []Booking       `json:"bookings"`
}

var (
	state     AppState
	stateMu   sync.Mutex
	statePath = filepath.Join(".", "state.json")
	gymName   = "Alfa Fitness"
	priceText = "–ü—Ä–∞–π—Å—ã –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤ (—Ç–µ–Ω–≥–µ):\n\n" +
		"‚Ä¢ Gold ‚Äî 25 000 ‚Ç∏ / –º–µ—Å\n" +
		"‚Ä¢ Silver ‚Äî 18 000 ‚Ç∏ / –º–µ—Å\n" +
		"‚Ä¢ Bronze ‚Äî 12 000 ‚Ç∏ / –º–µ—Å\n" +
		"‚Ä¢ –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π ‚Äî 9 000 ‚Ç∏ / –º–µ—Å\n\n" +
		"–ù–∞–∂–º–∏—Ç–µ \"–û–ø–ª–∞—Ç–∏—Ç—å\" –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã."
)

func defaultSlots() []string {
	return []string{"08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00"}
}

func defaultTrainers() []Trainer {
	return []Trainer{
		{ID: 1, Name: "–ê–π–¥–æ—Å –ù—É—Ä—Ç–∞–µ–≤", Bio: "–°–∏–ª–æ–≤–æ–π —Ç—Ä–µ–Ω–∏–Ω–≥, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞.", Achievements: []string{"–ú–° –ø–æ –ø–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥—É", "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å Almaty Open 2022"}, Slots: defaultSlots()},
		{ID: 2, Name: "–ê–ª–∏—è –ñ–∞–∫—Å—ã–ª—ã–∫–æ–≤–∞", Bio: "–§–∏—Ç–Ω–µ—Å –¥–ª—è –∂–µ–Ω—â–∏–Ω, –ø–æ—Å–ª–µ—Ä–æ–¥–æ–≤–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ.", Achievements: []string{"–°–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä NASM"}, Slots: defaultSlots()},
		{ID: 3, Name: "–†–∞—Å—É–ª –ê–±–¥—Ä–∞—Ö–º–∞–Ω", Bio: "–ë–æ–∫—Å, –û–§–ü, –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å.", Achievements: []string{"–ß–µ–º–ø–∏–æ–Ω –†–ö —Å—Ä–µ–¥–∏ —é–Ω–∏–æ—Ä–æ–≤ –ø–æ –±–æ–∫—Å—É"}, Slots: defaultSlots()},
		{ID: 4, Name: "–î–∏–Ω–∞—Ä–∞ –ï—Å–º—É—Ö–∞–Ω", Bio: "–ô–æ–≥–∞, –≥–∏–±–∫–æ—Å—Ç—å, –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏.", Achievements: []string{"RYT-500 Yoga Alliance"}, Slots: defaultSlots()},
		{ID: 5, Name: "–ú–∞–¥–∏ –ë–µ–∫–µ–Ω", Bio: "–ö—Ä–æ—Å—Å—Ñ–∏—Ç, —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞.", Achievements: []string{"–°–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä CrossFit L1"}, Slots: defaultSlots()},
	}
}

func loadState() error {
	f, err := os.Open(statePath)
	if err != nil {
		if errors.Is(err, os.ErrNotExist) {
			tmp := AppState{
				Users:    map[int64]*User{},
				Trainers: defaultTrainers(),
				Bookings: []Booking{},
			}
			stateMu.Lock()
			state = tmp
			stateMu.Unlock()
			return saveState()
		}
		return err
	}
	defer f.Close()

	var tmp AppState
	dec := json.NewDecoder(f)
	if err := dec.Decode(&tmp); err != nil {
		return err
	}
	if len(tmp.Trainers) == 0 {
		tmp.Trainers = defaultTrainers()
	}
	if tmp.Users == nil {
		tmp.Users = map[int64]*User{}
	}

	stateMu.Lock()
	state = tmp
	stateMu.Unlock()
	return nil
}

func saveState() error {
	stateMu.Lock()
	defer stateMu.Unlock()

	tmp := state
	b, err := json.MarshalIndent(&tmp, "", "  ")
	if err != nil {
		return err
	}
	return os.WriteFile(statePath, b, 0644)
}

func getOrCreateUser(id int64, name string) *User {
	stateMu.Lock()
	defer stateMu.Unlock()
	u, ok := state.Users[id]
	if !ok {
		u = &User{ID: id, Name: name, HasPaid: false}
		state.Users[id] = u
	}
	return u
}

func getTrainerByID(id int) (*Trainer, int) {
	stateMu.Lock()
	defer stateMu.Unlock()
	for i := range state.Trainers {
		if state.Trainers[i].ID == id {
			return &state.Trainers[i], i
		}
	}
	return nil, -1
}

func bookSlot(userID int64, trainerID int, slot string) error {
	stateMu.Lock()
	defer stateMu.Unlock()

	var existingTrainer int
	userCountWithThisTrainer := 0
	for _, b := range state.Bookings {
		if b.UserID != userID {
			continue
		}
		if existingTrainer == 0 {
			existingTrainer = b.Trainer
		}
		if b.Trainer == trainerID {
			userCountWithThisTrainer++
		} else if trainerID != existingTrainer {
			return fmt.Errorf("–≤—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –∫ –¥—Ä—É–≥–æ–º—É —Ç—Ä–µ–Ω–µ—Ä—É. –ú–æ–∂–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∫ –æ–¥–Ω–æ–º—É —Ç—Ä–µ–Ω–µ—Ä—É.")
		}
	}
	if userCountWithThisTrainer >= 3 {
		return fmt.Errorf("–ª–∏–º–∏—Ç: –º–∞–∫—Å–∏–º—É–º 3 –∑–∞–ø–∏—Å–∏ —É –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞.")
	}

	idx := -1
	for i := range state.Trainers {
		if state.Trainers[i].ID == trainerID {
			idx = i
			break
		}
	}
	if idx == -1 {
		return fmt.Errorf("—Ç—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	pos := -1
	for i, s := range state.Trainers[idx].Slots {
		if s == slot {
			pos = i
			break
		}
	}
	if pos == -1 {
		return fmt.Errorf("—Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
	}

	slots := state.Trainers[idx].Slots
	state.Trainers[idx].Slots = append(slots[:pos], slots[pos+1:]...)

	state.Bookings = append(state.Bookings, Booking{
		UserID:   userID,
		Trainer:  trainerID,
		TimeSlot: slot,
		BookedAt: time.Now().Unix(),
	})

	return nil
}

func mainMenuKeyboard() telegram.ReplyKeyboardMarkup {
	return telegram.NewReplyKeyboard(
		telegram.NewKeyboardButtonRow(
			telegram.NewKeyboardButton("–¢—Ä–µ–Ω–µ—Ä—ã"),
			telegram.NewKeyboardButton("–ü—Ä–∞–π—Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤"),
		),
	)
}

func trainersInlineKeyboard(hasPaid bool) telegram.InlineKeyboardMarkup {
	stateMu.Lock()
	trainers := make([]Trainer, len(state.Trainers))
	copy(trainers, state.Trainers)
	stateMu.Unlock()

	rows := [][]telegram.InlineKeyboardButton{}
	for _, t := range trainers {
		row := []telegram.InlineKeyboardButton{
			telegram.NewInlineKeyboardButtonData("üë§ "+t.Name, fmt.Sprintf("trainer_%d", t.ID)),
		}
		if hasPaid {
			row = append(row, telegram.NewInlineKeyboardButtonData("üóì –ó–∞–ø–∏—Å—å", fmt.Sprintf("book_%d", t.ID)))
		}
		rows = append(rows, row)
	}
	rows = append(rows, []telegram.InlineKeyboardButton{telegram.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –í –º–µ–Ω—é", "menu")})
	return telegram.NewInlineKeyboardMarkup(rows...)
}

func trainerDetailsKeyboard(t Trainer, hasPaid bool) telegram.InlineKeyboardMarkup {
	row := []telegram.InlineKeyboardButton{}
	if hasPaid {
		row = append(row, telegram.NewInlineKeyboardButtonData("üóì –ó–∞–ø–∏—Å—å", fmt.Sprintf("book_%d", t.ID)))
	}
	row = append(row, telegram.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "trainers"))
	return telegram.NewInlineKeyboardMarkup(row)
}

func scheduleKeyboard(trainerID int) telegram.InlineKeyboardMarkup {
	stateMu.Lock()
	slots := append([]string{}, state.Trainers[trainerID-1].Slots...)
	stateMu.Unlock()

	rows := [][]telegram.InlineKeyboardButton{}
	row := []telegram.InlineKeyboardButton{}
	for i, s := range slots {
		row = append(row, telegram.NewInlineKeyboardButtonData(s, fmt.Sprintf("slot_%d_%s", trainerID, s)))
		if (i+1)%4 == 0 {
			rows = append(rows, row)
			row = []telegram.InlineKeyboardButton{}
		}
	}
	if len(row) > 0 {
		rows = append(rows, row)
	}
	rows = append(rows, []telegram.InlineKeyboardButton{telegram.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "trainers")})
	return telegram.NewInlineKeyboardMarkup(rows...)
}

func pricingKeyboard() telegram.InlineKeyboardMarkup {
	return telegram.NewInlineKeyboardMarkup(
		telegram.NewInlineKeyboardRow(
			telegram.NewInlineKeyboardButtonData("–û–ø–ª–∞—Ç–∏—Ç—å Gold (25 000 ‚Ç∏)", "pay_gold"),
		),
		telegram.NewInlineKeyboardRow(
			telegram.NewInlineKeyboardButtonData("–û–ø–ª–∞—Ç–∏—Ç—å Silver (18 000 ‚Ç∏)", "pay_silver"),
		),
		telegram.NewInlineKeyboardRow(
			telegram.NewInlineKeyboardButtonData("–û–ø–ª–∞—Ç–∏—Ç—å Bronze (12 000 ‚Ç∏)", "pay_bronze"),
		),
		telegram.NewInlineKeyboardRow(
			telegram.NewInlineKeyboardButtonData("–û–ø–ª–∞—Ç–∏—Ç—å –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π (9 000 ‚Ç∏)", "pay_student"),
		),
		telegram.NewInlineKeyboardRow(
			telegram.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –í –º–µ–Ω—é", "menu"),
		),
	)
}

func main() {
	if err := loadState(); err != nil {
		log.Fatalf("load state: %v", err)
	}

	token := os.Getenv("TELEGRAM_TOKEN")
	if token == "" {
		log.Fatal("TELEGRAM_TOKEN is not set")
	}

	bot, err := telegram.NewBotAPI(token)
	if err != nil {
		log.Panic(err)
	}
	bot.Debug = false
	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := telegram.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			userID := update.Message.From.ID
			name := strings.TrimSpace(update.Message.From.FirstName + " " + update.Message.From.LastName)
			if name == "" {
				name = update.Message.From.UserName
			}

			user := getOrCreateUser(userID, name)

			if update.Message.IsCommand() || update.Message.Text == "/start" {
				welcome := fmt.Sprintf("–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∏—Ç–Ω–µ—Å –∑–∞–ª %s!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ.", gymName)
				msg := telegram.NewMessage(update.Message.Chat.ID, welcome)
				msg.ReplyMarkup = mainMenuKeyboard()
				_ = send(bot, msg)
				continue
			}

			switch update.Message.Text {
			case "–¢—Ä–µ–Ω–µ—Ä—ã":
				msg := telegram.NewMessage(update.Message.Chat.ID, "–ù–∞—à–∏ —Ç—Ä–µ–Ω–µ—Ä—ã:")
				msg.ReplyMarkup = mainMenuKeyboard()
				msg.ReplyMarkup = nil
				msg.Text = "–ù–∞—à–∏ —Ç—Ä–µ–Ω–µ—Ä—ã (–Ω–∞–∂–º–∏—Ç–µ –∏–º—è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ):"
				msgReply := telegram.NewMessage(update.Message.Chat.ID, msg.Text)
				msgReply.ReplyMarkup = trainersInlineKeyboard(user.HasPaid)
				_ = send(bot, msgReply)
			case "–ü—Ä–∞–π—Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤":
				msg := telegram.NewMessage(update.Message.Chat.ID, priceText)
				msg.ReplyMarkup = pricingKeyboard()
				_ = send(bot, msg)
			default:
				msg := telegram.NewMessage(update.Message.Chat.ID, "–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é.")
				msg.ReplyMarkup = mainMenuKeyboard()
				_ = send(bot, msg)
			}
		}

		if update.CallbackQuery != nil {
			cq := update.CallbackQuery
			userID := cq.From.ID
			user := getOrCreateUser(userID, cq.From.FirstName)

			data := cq.Data
			_ = answerCallback(bot, cq.ID, "")

			if data == "menu" {
				m := telegram.NewMessage(cq.Message.Chat.ID, fmt.Sprintf("–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∏—Ç–Ω–µ—Å –∑–∞–ª %s!", gymName))
				m.ReplyMarkup = mainMenuKeyboard()
				_ = send(bot, m)
				continue
			}
			if data == "trainers" {
				m := telegram.NewMessage(cq.Message.Chat.ID, "–ù–∞—à–∏ —Ç—Ä–µ–Ω–µ—Ä—ã (–Ω–∞–∂–º–∏—Ç–µ –∏–º—è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ):")
				m.ReplyMarkup = trainersInlineKeyboard(user.HasPaid)
				_ = send(bot, m)
				continue
			}

			if strings.HasPrefix(data, "trainer_") {
				idStr := strings.TrimPrefix(data, "trainer_")
				var id int
				fmt.Sscanf(idStr, "%d", &id)
				tr, _ := getTrainerByID(id)
				if tr == nil {
					_ = send(bot, telegram.NewMessage(cq.Message.Chat.ID, "–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"))
					continue
				}
				text := fmt.Sprintf("%s\n\n–û–ø–∏—Å–∞–Ω–∏–µ: %s\n\n–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n‚Ä¢ %s", tr.Name, tr.Bio, strings.Join(tr.Achievements, "\n‚Ä¢ "))
				m := telegram.NewMessage(cq.Message.Chat.ID, text)
				m.ReplyMarkup = trainerDetailsKeyboard(*tr, user.HasPaid)
				_ = send(bot, m)
				continue
			}

			if strings.HasPrefix(data, "book_") {
				if !user.HasPaid {
					_ = send(bot, telegram.NewMessage(cq.Message.Chat.ID, "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, —Å–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ü—Ä–∞–π—Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤\"."))
					continue
				}
				idStr := strings.TrimPrefix(data, "book_")
				var id int
				fmt.Sscanf(idStr, "%d", &id)
				tr, _ := getTrainerByID(id)
				if tr == nil {
					_ = send(bot, telegram.NewMessage(cq.Message.Chat.ID, "–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"))
					continue
				}
				m := telegram.NewMessage(cq.Message.Chat.ID, fmt.Sprintf("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞ %s:", tr.Name))
				m.ReplyMarkup = scheduleKeyboard(tr.ID)
				_ = send(bot, m)
				continue
			}

			if strings.HasPrefix(data, "slot_") {
				parts := strings.SplitN(strings.TrimPrefix(data, "slot_"), "_", 2)
				if len(parts) != 2 {
					continue
				}
				var trainerID int
				fmt.Sscanf(parts[0], "%d", &trainerID)
				slot := parts[1]

				if !user.HasPaid {
					_ = send(bot, telegram.NewMessage(cq.Message.Chat.ID, "–°–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç."))
					continue
				}

				if err := bookSlot(userID, trainerID, slot); err != nil {
					_ = send(bot, telegram.NewMessage(cq.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è: "+err.Error()))
					continue
				}
				_ = saveState()

				confirm := fmt.Sprintf("–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢—Ä–µ–Ω–µ—Ä #%d, –≤—Ä–µ–º—è %s.", trainerID, slot)
				_ = send(bot, telegram.NewMessage(cq.Message.Chat.ID, confirm))

				tr, _ := getTrainerByID(trainerID)
				m := telegram.NewMessage(cq.Message.Chat.ID, fmt.Sprintf("–°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã —É %s –æ–±–Ω–æ–≤–ª–µ–Ω—ã:", tr.Name))
				m.ReplyMarkup = scheduleKeyboard(tr.ID)
				_ = send(bot, m)
				continue
			}

			if strings.HasPrefix(data, "pay_") {
				stateMu.Lock()
				state.Users[userID].HasPaid = true
				stateMu.Unlock()
				_ = saveState()

				_ = send(bot, telegram.NewMessage(cq.Message.Chat.ID, "–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!"))
				m := telegram.NewMessage(cq.Message.Chat.ID, "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ —Ç—Ä–µ–Ω–µ—Ä—É –≤ —Ä–∞–∑–¥–µ–ª–µ \"–¢—Ä–µ–Ω–µ—Ä—ã\":")
				m.ReplyMarkup = trainersInlineKeyboard(true)
				_ = send(bot, m)
				continue
			}
		}
	}
}

func send(bot *telegram.BotAPI, msg telegram.Chattable) error {
	_, err := bot.Send(msg)
	if err != nil {
		log.Printf("send error: %v", err)
	}
	return err
}

func answerCallback(bot *telegram.BotAPI, id string, text string) error {
	cb := telegram.NewCallback(id, text)
	_, err := bot.Request(cb)
	return err
}
